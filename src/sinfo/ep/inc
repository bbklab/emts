#!/bin/bash
#
#
# =======================================================================================
#  This File Contains Global Variables and Public Functions Used by MOLE and Plugins. 
# =======================================================================================
#
#

# Check item is subset of sets or not ?
# Usge:		is_sub "item" "sets"
# Return:	0,1 | yes,no
#
is_sub() {
        local item="$1"  sets="$2"
        if [ "$(echo -e "${sets}" | grep -E -o -w "${item}")" == "" ]; then
                return 1
        else
                return 0
        fi  
}

# Check item is int or not ? 
# Usage:	is_int "item"
# Return:	0,1 | yes,no
#
is_int() {
	local item="$1"
	if [ -z "${item}" ] || [ ! -z "${item//[0-9]}" ]; then
		return 1
	else
		return 0
	fi
}

# Check item is float or not ?
# Usage:	is_float "item"
# Return	0,1 | yes,no
#
is_float() {
	local item="$1"	float_regex="^[0-9]*\.[0-9]+$"
	if [[ "${item}" =~ ${float_regex} ]]; then
		return 0
	else
		return 1
	fi
}

# Check item is between {min} and {max} or not ?
# Usage:	is_between {item} {min} {max}
# Return:	0,1 | yes,no
#
is_between() {
	echo $1 $2 $3 | /bin/awk '{if($1>=$2 && $1<=$3){exit 0;} else{exit 1;}}' 2>&-
}


# Check item is ip-address or not ?
# Usage:	is_ipaddr "127.0.0.1"
# Return:	0 means yes, otherwise no
#
is_ipaddr() {
        echo "${1}" | grep -E -q "^(([0-9]|([1-9][0-9])|(1[0-9]{2})|(2([0-4][0-9]|5[0-5])))\.){3}([1-9]|([1-9][0-9])|(1[0-9]{2})|(2([0-4][0-9]|5[0-5])))$"
}

# Read config file without head [section]
# Usage:	read_conf {file} {config-name}
# Retrun:	value of config-name
#
read_conf() {
	local file=$1 config=$2 kvsep=$3
	local result=   awk=

	if [ -z "${kvsep}" ]; then
		awk=" awk "
	else
		awk=" awk -F"${kvsep}" "
	fi

	if [ -f "${file}" ] && [ -s "${file}" ]; then
		if [ -z "${config}" ]; then	# read and output the first un-empty line
			result=$( ${awk} '($0~/^[ \t]*$/){next;} ($0~/^[ \t]*#/){next;} {print $1;exit}' "${file}" 2>&- )
		else
			result=$( ${awk} '($1~/^'$config'\>/) {$1="";print;exit;}' "${file}" 2>&- )
		fi
		result=$( echo -e "${result}" | tr -d '[" \t\n]' | sed -e 's/\x00//g;s/\x0D//g' )
	fi
	echo -en "${result}"
}

# Read ini config file
# Usage:	read_iniconf {file} {section} {config-name}
# Return:	value of matched config-name
#
read_iniconf() {
	local file=$1 section=$2 config=$3 kvsep=$4
	local result=	awk=

	if [ -z "${kvsep}" ]; then
		awk=" awk "
	else
		awk=" awk -F"${kvsep}" "
	fi

	if [ -f "${file}" ] && [ -s "${file}" ]; then
		result=$( cat ${file} | tr '\t' ' ' |\
                        ${awk} '\
                                ($0~/^ *\[ *'${section}' *\] *$/){k=1;x=1;next}\
                                ( x==1 && $0~/^ *\[ *.* *\] *$/ && $0!~/^ *\[ *'${section}' *\] *$/ ){exit}\
                                ( k==1 && x==1 && $1~/^'${config}'\>/ ){$1="";print;exit}' 2>&- |\
                         sed -e 's/^[ \t]*//; s/[ \t]*$//;' 2>&- )
		result=$( echo -e "${result}" | tr -d '[" \t\n]' | sed -e 's/\x00//g;s/\x0D//g' )
	fi
	echo -en "${result}"
}
