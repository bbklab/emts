#!/usr/bin/env perl

BEGIN {
  my @incs = ();    # set additional path
  push @INC, @incs;
};

use strict;
use warnings;
use utf8;
use IO::Socket;
use IO::Socket::INET;
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");
binmode(STDERR, ":encoding(utf8)");

$SIG{'PIPE'} = 'IGNORE';

$| = 1;

unless (scalar @ARGV) {
  exit (0);
}

our $addr_port = $ARGV[0];
our $time_out = 5;

my @addr_pair = split /\s+/, $addr_port;
while(@addr_pair) {

  my ($pop_host, $pop_port, $pop_user, $pop_pass) = (split /,/, shift @addr_pair)[0,1,2,3];
  if (!defined $pop_host || !defined $pop_port) {
	next;
  }
  if ($pop_port =~ /\D/) {
	next;
  }

  ### $pop_host
  ### $pop_port
  ### $pop_user
  ### $pop_pass

  my $pop=IO::Socket::INET->new(
        PeerAddr =>     $pop_host,
        PeerPort =>     $pop_port,
        Proto    =>     'tcp',
        Timeout =>      $time_out,
  );
  my $address = $pop_host . ':' . $pop_port;
  unless (defined $pop) {
	if ($@) {
		$@ =~ s/[\r\n]//g;
		printf("%s warn %s\n", $address, $@)
	} else {
		printf("%s warn connect error\n", $address)
	}
	next;
  }

  my $welcome = <$pop>;
  if ($welcome && $welcome ne '') {
	$welcome =~ s/[\r\n]//g;
  }
  unless ($welcome && $welcome =~ m/\A\+OK/) {
	if ($welcome && $welcome ne '') {
		printf("%s warn %s\n", $address, $welcome);
  	} else {
		printf("%s warn welcome banner empty\n", $address);
  	}
	next;
  }

  if($pop_user && $pop_pass) {
	print $pop "USER $pop_user\r\n";
	my $response = <$pop>;
	if ($response && $response ne '') {
		$response =~ s/[\r\n]//g;
	}
	unless (defined $response && $response =~ m/\A\+OK/) {
		$response = '' if (!defined $response);
		printf("%s warn %s\n", $address, $response);
		next;
	}

	print $pop "PASS $pop_pass\r\n";
	$response = <$pop>;
	if ($response && $response ne '') {
		$response =~ s/[\r\n]//g;
	}
	unless (defined $response && $response =~ m/\A\+OK/) {
		$response = '' if (!defined $response);
		printf("%s warn %s\n", $address, $response)
		next;
	} 
  }

  printf("%s succ\n", $address);
}
