#!/usr/bin/env perl

BEGIN {
  my @incs = ();    # set additional path
  push @INC, @incs;
};

use strict;
use warnings;
use utf8;
use IO::Socket;
use IO::Socket::INET;
use MIME::Base64 qw(encode_base64);
# use Smart::Comments;

$SIG{'PIPE'} = 'IGNORE';

$| = 1;

sub show_help {
print <<EOF
Arguments:    {smtp_addr}
Usage:   "127.0.0.1,25,zz\@eyou.net,zzpassword  gateway.eyou.net,25,eyou,eyou"

Output:   
{smtp_addr} succ
{smtp_addr} warn http_code

Example:
127.0.0.1:25 warn IO::Socket::INET: connect: Connection refused
gateway.eyou.net:25 succ
EOF
;
exit (0);
}

unless (scalar @ARGV) {
  exit (0);
}

if ($ARGV[0] eq 'h') {
  show_help;
}

our $addr_port = $ARGV[0];
our $time_out = 5;
our $helo_me = 'localhost';

my @addr_pair = split /\s+/, $addr_port;
while(@addr_pair) {

  my ($smtp_host, $smtp_port, $smtp_user, $smtp_pass) = (split /,/, shift @addr_pair)[0,1,2,3];
  if (!defined $smtp_host || !defined $smtp_port) {
	next;
  }
  if ($smtp_port =~ /\D/) {
	next;
  }

  my $smtp=IO::Socket::INET->new(
        PeerAddr =>     $smtp_host,
        PeerPort =>     $smtp_port,
        Proto    =>     'tcp',
        Timeout =>      $time_out,
  );
  my $address = $smtp_host . ':' . $smtp_port;
  unless (defined $smtp) {
	if ($@) {
		$@ =~ s/[\r\n]//g;
		printf("%s warn %s\n", $address, $@);
	} else {
		printf("%s warn connect error\n", $address);
	}
	next;
  }

  # run all process in a eval{} with alarm(5)
  eval {
	  local $SIG{'ALRM'} = sub { die 'Running Timed Out'; };
	  alarm(5);
	
	  my $welcome = <$smtp>;
	  if ($welcome && $welcome ne '') {
		$welcome =~ s/[\r\n]//g;
	  }
	  unless ($welcome && $welcome =~ m/\A2\d\d\s+/) {
		if ($welcome && $welcome ne '') {
			printf("%s warn %s\n", $address, $welcome);
		} else {
			printf("%s warn welcome banner empty\n", $address);
		}
	  	goto BREAK;
	  }
	  
	  print $smtp "HELO $helo_me\r\n";
	  my $response = <$smtp>;
	  if ($response && $response ne '') {
	       $response =~ s/[\r\n]//g;
	  }
	  unless ($response && $response =~ m/\A2\d\d\s+/) {
		$response = '' if (!defined $response);
		printf ("%s warn %s\n", $address, $response);
		goto BREAK;
	  } 
	
	  print $smtp "NOOP\r\n";
	  $response = <$smtp>;
	  if ($response && $response ne '') {
	       $response =~ s/[\r\n]//g;
	  }
	  unless ($response && $response =~ m/\A2\d\d\s+/) {
		$response = '' if (!defined $response);
		printf ("%s warn %s\n", $address, $response);
		goto BREAK;
	  }
	
	  if($smtp_user && $smtp_pass) {
		my ($encode_smtp_user, $encode_smtp_pass);
		$encode_smtp_user = encode_base64($smtp_user,'');	# trim '\n', empty eof
		$encode_smtp_pass = encode_base64($smtp_pass,'');	# trim '\n', empty eof
		unless ($smtp_user && $smtp_pass) {
			goto BREAK;	
		}
	
		print $smtp "AUTH LOGIN\r\n";
		$response = <$smtp>;
		if ($response && $response ne '') {
			$response =~ s/[\r\n]//g;
		}
		unless (defined $response && $response =~ m/\A3\d\d\s+/) {
			$response = '' if (!defined $response);
			printf("%s warn %s\n", $address, $response);
			goto BREAK;
		}
		
		print $smtp "$encode_smtp_user\r\n";
		$response = <$smtp>;
		if ($response && $response ne '') {
			$response =~ s/[\r\n]//g;
		}
		unless (defined $response && $response =~ m/\A3\d\d\s+/) {
			$response = '' if (!defined $response);
			printf ("%s warn %s\n", $address, $response);
			goto BREAK;
		} 
	
		print $smtp "$encode_smtp_pass\r\n";
		$response = <$smtp>;
		if ($response && $response ne '') {
			$response =~ s/[\r\n]//g;
		}
		unless (defined $response && $response =~ m/\A2\d\d\s+/) {
			$response = '' if (!defined $response);
			printf ("%s warn %s\n", $address, $response);
			goto BREAK;
		} 
	  }
	  alarm(0);
  };
  alarm(0);

  if ($@) {
	$@ =~ s/[\r\n]//g;
	if ($@ =~ m/Running Timed Out/) {
  		printf ("%s warn timeout\n", $address);
	} else {
		printf ("%s warn %s\n", $address, $@);
	}
  } else {
  	printf ("%s succ\n", $address );
  }

  BREAK: {
	next;
  }
}
