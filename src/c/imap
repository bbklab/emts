#!/usr/bin/env perl

BEGIN {
  my @incs = ();    # set additional path
  push @INC, @incs;
};

use strict;
use warnings;
use utf8;
use IO::Socket;
use IO::Socket::INET;
# use Smart::Comments;
binmode(STDIN, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");
binmode(STDERR, ":encoding(utf8)");
binmode STDOUT, ':raw';

$SIG{'PIPE'} = 'IGNORE';

$| = 1;

sub show_help {
print <<EOF
Arguments:    {imap_addr}
Usage:   "127.0.0.1,143,zz\@eyou.net,zzpassword  imap.126.com,143,eyou,eyou"

Output:   
{imap_addr} succ
{imap_addr} warn {warn-info}

Example:
127.0.0.1:143 warn IO::Socket::INET: connect: Connection refused
mail.eyou.net:143 succ
EOF
;
exit(0);
}

unless (scalar @ARGV) {
  exit (0);
}

if ($ARGV[0] eq 'h') {
  show_help;
}

our $addr_port = $ARGV[0];
our $time_out = 5;

my @addr_pair = split /\s+/, $addr_port;
while(@addr_pair) {
  my ($imap_host, $imap_port, $imap_user, $imap_pass) = (split /,/, shift @addr_pair)[0,1,2,3];
  if (!defined $imap_host || !defined $imap_port) {
	next;
  }
  if ($imap_port =~ /\D/) {
	next;
  }

  ### $imap_host
  ### $imap_port
  ### $imap_user
  ### $imap_pass

  my $address = $imap_host . ':' . $imap_port;
  my $imap=IO::Socket::INET->new(
	PeerAddr =>	$imap_host,
	PeerPort => 	$imap_port,
	Proto	 =>	'tcp',
	Timeout =>	$time_out,
  );
  if (! defined $imap) {
	if ($@) {
		$@ =~ s/[\r\n]//g;
		printf("%s warn %s\n", $address, $@);
	} else {
		printf("%s warn connect error\n", $address);
	}
	next;
  }

  # run all process in a eval{} with alarm(5)
  eval {

  	local $SIG{'ALRM'} = sub { die 'Running Timed Out'; };
  	alarm(5);

  	my $welcome = <$imap>;
  	### $welcome

	  if ($welcome && $welcome ne '') {
		$welcome =~ s/[\r\n]//g;
	  }
	  unless (defined $welcome && $welcome =~ m/\A.\s+OK\s+/) {
		if ($welcome && $welcome ne '') {
			printf("%s warn %s\n", $address, $welcome);
		} else {
			printf("%s warn welcome banner empty\n", $address);
		}
		goto BREAK;
	  }
	
	  print $imap "A01 NOOP\r\n";
	  my $response = <$imap>;
	  ### $response
	
	  if ($response && $response ne '') {
		$response =~ s/[\r\n]//g;
	  }
	  unless (defined $response && $response =~ m/\AA01\s+OK\s+/i) {
		$response = '' if (!defined $response);
	        printf("%s warn %s\n", $address, $response);
		goto BREAK;
	  } 
	
	  if($imap_user && $imap_pass) {
		print $imap "A01 LOGIN $imap_user $imap_pass\r\n";
		my $response = <$imap>;
		### $response
	
	  	if ($response && $response ne '') {
			$response =~ s/[\r\n]//g;
	  	}
		unless ($response && $response =~ m/\AA01\s+OK\s+/i) {
			$response = '' if (!defined $response);
			printf("%s warn %s\n", $address, $response);
			goto BREAK;
		} 
	  } 
	  alarm(0);
  };
  alarm(0);

  if ($@) {
        $@ =~ s/[\r\n]//g;
        if ($@ =~ m/Running Timed Out/) {
                printf ("%s warn timeout\n", $address);
        } else {
                printf ("%s warn %s\n", $address, $@);
        }
  } else {
  	printf("%s succ\n", $address)
  }

  BREAK: {
        next;
  };
}
